entered daikon.chicory.Runtime.setDtrace(.\JunitTesting.dtrace.gz, false)...
0
2
0.0
0
3
0.0
0
4
0.0
0
5
0.0
0
6
0.0
1
7
1.0
1
8
0.5
1
9
0.33333334
1
10
0.25
1
11
0.2
4
12
2.0
4
13
1.0
4
14
0.6666667
4
15
0.5
4
16
0.4
9
17
3.0
9
18
1.5
9
19
1.0
9
20
0.75
9
21
0.6
16
22
4.0
16
23
2.0
16
24
1.3333334
16
25
1.0
16
26
0.8
Daikon version 5.4.0, released October 4, 2016; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:

===========================================================================
JunitTesting:::OBJECT
===========================================================================
JunitTesting.JunitTesting():::EXIT
===========================================================================
JunitTesting.countA(java.lang.String):::ENTER
arg0 != null
===========================================================================
JunitTesting.countA(java.lang.String):::EXIT
arg0.toString == orig(arg0.toString)
===========================================================================
JunitTesting.div(int, int):::ENTER
arg0 >= 0
arg1 >= 0
===========================================================================
JunitTesting.div(int, int):::EXIT17
===========================================================================
JunitTesting.div(int, int):::EXIT
===========================================================================
JunitTesting.main(java.lang.String[]):::ENTER
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
JunitTesting.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
arg0[] == []
arg0[].toString == []
===========================================================================
JunitTesting.square(int):::ENTER
arg0 >= 0
===========================================================================
JunitTesting.square(int):::EXIT
return >= 0
return == orig(arg0)**2
return >= orig(arg0)
Exiting Daikon.
